(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{458:function(t,a,s){"use strict";s.r(a);var e=s(20),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("strong",[t._v("学习库函数最好的方法是看手册")])]),t._v(" "),s("h2",{attrs:{id:"hal库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal库"}},[t._v("#")]),t._v(" HAL库")]),t._v(" "),s("h3",{attrs:{id:"hal-delay"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-delay"}},[t._v("#")]),t._v(" HAL_Delay")]),t._v(" "),s("p",[t._v("HAL 库提供了用于毫秒级延迟的函数：HAL_Delay 函数（使用"),s("code",[t._v("_weak")]),t._v(" 修饰符说明该函数是可以用户重定义的）")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("__weak "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_Delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" Delay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_Delay")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("函数作用")]),t._v(" "),s("td",[t._v("使系统延迟对应的毫秒级时间")])]),t._v(" "),s("tr",[s("td",[t._v("返回值")]),t._v(" "),s("td",[t._v("void")])]),t._v(" "),s("tr",[s("td",[t._v("参数")]),t._v(" "),s("td",[t._v("Delay，对应的延迟毫秒数，比如延迟 1 秒就为 1000")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-gettick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-gettick"}},[t._v("#")]),t._v(" HAL_GetTick")]),t._v(" "),s("p",[s("code",[t._v("uwTick")]),t._v("变量中存储的是从STM32的 Systick 初始化以来所经过的时间（ms），"),s("code",[t._v("uwTick")]),t._v("的存在相当于给整个程序提供了一个绝对的时间基准，访问其值可用如下函数：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_GetTick")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("函数作用")]),t._v(" "),s("td",[t._v("返回当前的"),s("code",[t._v("uwTick")]),t._v("值")])]),t._v(" "),s("tr",[s("td",[t._v("返回值")]),t._v(" "),s("td",[t._v("当前的"),s("code",[t._v("uwTick")]),t._v("值")])])])]),t._v(" "),s("h2",{attrs:{id:"gpio-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gpio-操作"}},[t._v("#")]),t._v(" GPIO 操作")]),t._v(" "),s("h3",{attrs:{id:"hal-gpio-writepin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-gpio-writepin"}},[t._v("#")]),t._v(" HAL_GPIO_WritePin")]),t._v(" "),s("p",[t._v("定义如下：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_WritePin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO_TypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" GPIOx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" GPIO_PinState PinState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("HAL_GPIO_WritePin")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使得对应的引脚输出高电平或者低电平")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("void")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数 1：GPIOx")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("对应 GPIO 总线，其中 x 可以是 A…I。例如 PH10，则输入 GPIOH")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数 2：GPIO_Pin")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("对应引脚数，可以是 0-15。例如 PH10，则输入 GPIO_PIN_10")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("参数 3：PinState")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("GPIO_PIN_RESET")]),t._v("：输出低电平；"),s("code",[t._v("GPIO_PIN_SET")]),t._v("：输出高电平")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-gpio-togglepin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-gpio-togglepin"}},[t._v("#")]),t._v(" HAL_GPIO_TogglePin")]),t._v(" "),s("p",[t._v("定义如下：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_TogglePin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO_TypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" GPIOx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_GPIO_TogglePin")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("函数作用")]),t._v(" "),s("td",[t._v("翻转对应引脚的电平")])]),t._v(" "),s("tr",[s("td",[t._v("返回值")]),t._v(" "),s("td",[t._v("void")])]),t._v(" "),s("tr",[s("td",[t._v("参数 1：GPIOx")]),t._v(" "),s("td",[t._v("对应 GPIO 总线，其中 x 可以是 A…I。例如 PH10，则输入 GPIOH")])]),t._v(" "),s("tr",[s("td",[t._v("参数 2：GPIO_Pin")]),t._v(" "),s("td",[t._v("对应引脚数。可以是 0-15。例如 PH10，则输入 GPIO_PIN_10")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-gpio-readpin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-gpio-readpin"}},[t._v("#")]),t._v(" HAL_GPIO_ReadPin")]),t._v(" "),s("p",[t._v("定义如下：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("GPIO_PinState "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_ReadPin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GPIO_TypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" GPIOx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_GPIO_ReadPin")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("函数作用")]),t._v(" "),s("td",[t._v("返回引脚电平")])]),t._v(" "),s("tr",[s("td",[t._v("返回值")]),t._v(" "),s("td",[t._v("GPIO_PinState，如果是高电平则返回"),s("code",[t._v("GPIO_PIN_SET")]),t._v("（对应为1），如果是低电平则返回"),s("code",[t._v("GPIO_PIN_RESET")]),t._v("（对应为0）")])]),t._v(" "),s("tr",[s("td",[t._v("参数 1             ")]),t._v(" "),s("td",[t._v("对应 GPIO 总线，其中 x 可以是 A…I。例如 PH10，则输入 GPIOH")])]),t._v(" "),s("tr",[s("td",[t._v("参数 2")]),t._v(" "),s("td",[t._v("对应引脚数。可以是 0-15。例如 PH10，则输入 GPIO_PIN_10")])])])]),t._v(" "),s("h2",{attrs:{id:"定时器操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定时器操作"}},[t._v("#")]),t._v(" 定时器操作")]),t._v(" "),s("h3",{attrs:{id:"hal-tim-irqhandler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-irqhandler"}},[t._v("#")]),t._v(" HAL_TIM_IRQHandler")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_TIM_IRQHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TIM_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("htim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_TIM_IRQHandler")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("函数作用")]),t._v(" "),s("td",[t._v("HAL对涉及（定时器）中断的寄存器进行处理")])]),t._v(" "),s("tr",[s("td",[t._v("返回值")]),t._v(" "),s("td",[t._v("void")])]),t._v(" "),s("tr",[s("td",[t._v("参数")]),t._v(" "),s("td",[s("code",[t._v("*htim")]),t._v(" 定时器的句柄指针，如定时器1就输入"),s("code",[t._v("&htim1")]),t._v("，定时器2就输入"),s("code",[t._v("&htim2")])])])])]),t._v(" "),s("p",[t._v("在这个函数对寄存器进行配置之后，程序将会自动调用中断回调函数")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("_weak "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_TIM_PeriodElapsedCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TIM_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("htim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("和上面一样，它的参数也是定时器的句柄指针。我们在"),s("code",[t._v("main.c")]),t._v("中就是需要重新将"),s("strong",[t._v("中断的内容")]),t._v("写入这个回调函数，定时器中断更多请内容查看"),s("RouterLink",{attrs:{to:"/pages/82e74c/"}},[t._v("此处")])],1),t._v(" "),s("h3",{attrs:{id:"hal-tim-base-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-base-start"}},[t._v("#")]),t._v(" HAL_TIM_Base_Start")]),t._v(" "),s("p",[t._v("如果不开启中断，仅让定时器以定时功能工作，为了使定时器开始工作，需要调用HAL库提供的函数")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_TIM_Base_Start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TIM_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("htim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_TIM_Base_Start")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("函数作用")]),t._v(" "),s("td",[t._v("使对应的定时器开始工作")])]),t._v(" "),s("tr",[s("td",[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使定时器开始工作，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",[t._v("参数")]),t._v(" "),s("td",[s("code",[t._v("*htim")]),t._v(" 定时器的句柄指针，如定时器1就输入"),s("code",[t._v("&htim1")]),t._v("，定时器2就输入"),s("code",[t._v("&htim2")])])])])]),t._v(" "),s("p",[t._v("此函数需要在主循环"),s("code",[t._v("while(1)")]),t._v("之前调用")]),t._v(" "),s("h3",{attrs:{id:"hal-tim-base-start-it"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-base-start-it"}},[t._v("#")]),t._v(" HAL_TIM_Base_Start_IT")]),t._v(" "),s("p",[t._v("接上面的函数，如果不仅需要开启定时器，还需要使用定时中断，则需要调用此函数")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_TIM_Base_Start_IT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TIM_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("htim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("HAL_TIM_Base_Start_IT")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使对应的定时器开始工作，并使能其定时中断")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使定时器开始工作，则返回HAL_OK")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("*htim")]),t._v(" 定时器的句柄指针，如定时器1就输入"),s("code",[t._v("&htim1")]),t._v("，定时器2就输入"),s("code",[t._v("&htim2")])])])])]),t._v(" "),s("p",[t._v("此函数也需要在主循环"),s("code",[t._v("while(1)")]),t._v("之前调用")]),t._v(" "),s("h3",{attrs:{id:"hal-tim-setcompare"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-setcompare"}},[t._v("#")]),t._v(" __HAL_TIM_SetCompare")]),t._v(" "),s("p",[t._v("这是在定时器进行 PWM 输出的时候，对储存比较值的寄存器 TIMx_CCRx 赋值的函数")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("__HAL_TIM_SET_COMPARE")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __CHANNEL__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __COMPARE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__CHANNEL__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" TIM_CHANNEL_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CCR1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__COMPARE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__CHANNEL__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" TIM_CHANNEL_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CCR2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__COMPARE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__CHANNEL__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" TIM_CHANNEL_3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CCR3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__COMPARE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CCR4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__COMPARE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("__HAL_TIM_SetCompare")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("在程序运行时对储存比较值的寄存器 TIMx_CCRx 赋值，修改比较值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("输入"),s("code",[t._v("*htim")]),t._v(" 定时器的句柄指针即可，如定时器1就输入"),s("code",[t._v("&htim1")]),t._v("，定时器2就输入"),s("code",[t._v("&htim2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("定时器的频道号，如"),s("code",[t._v("TIM_CHANNEL_1")]),t._v(", "),s("code",[t._v("TIM_CHANNEL_2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数3")]),t._v(" "),s("td",[t._v("要赋给 TIMx_CCRx 寄存器的值，此值要小于 TIMx_ARR 内的重装载值")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-tim-prescaler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-prescaler"}},[t._v("#")]),t._v(" __HAL_TIM_PRESCALER")]),t._v(" "),s("p",[t._v("其实它和 "),s("code",[t._v("__HAL_TIM_SET_PRESCALER")]),t._v("是等效的，因为此句：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("__HAL_TIM_PRESCALER")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("__HAL_TIM_SET_PRESCALER")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("但其原始定义为：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("__HAL_TIM_SET_PRESCALER")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __PRESC__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("PSC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__PRESC__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("__HAL_TIM_PRESCALER")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("在程序运行时对储存预分频比的寄存器 TIMx_PSR 赋值，修改预分频比")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("输入"),s("code",[t._v("*htim")]),t._v(" 定时器的句柄指针即可，如定时器1就输入"),s("code",[t._v("&htim1")]),t._v("，定时器2就输入"),s("code",[t._v("&htim2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("要赋给 TIMx_PSR 寄存器的新预分频比值")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-tim-pwm-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-pwm-start"}},[t._v("#")]),t._v(" HAL_TIM_PWM_Start")]),t._v(" "),s("p",[t._v("HAL库提供的PWM初始化函数，为定时器初始化 PWM")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_TIM_PWM_Start")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("使对应定时器的对应通道开始PWM输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使定时器开始工作，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[s("code",[t._v("*htim")]),t._v("定时器的句柄指针，如定时器1就输入"),s("code",[t._v("&htim1")]),t._v("，定时器2就输入"),s("code",[t._v("&htim2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("Channel 定时器PWM输出的通道，比如通道1为"),s("code",[t._v("TIM_CHANNEL1")])])])])]),t._v(" "),s("h2",{attrs:{id:"adc-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adc-操作"}},[t._v("#")]),t._v(" ADC 操作")]),t._v(" "),s("h3",{attrs:{id:"hal-adc-configchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-adc-configchannel"}},[t._v("#")]),t._v(" HAL_ADC_ConfigChannel")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_ConfigChannel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ADC_ChannelConfTypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" sConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_ADC_ConfigChannel")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("设置ADC通道的各个属性值，包括转换通道，序列排序，采样时间等")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使ADC开始工作，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("TIM_HandleTypeDef * hadc即ADC的句柄指针，如果是adc1就输入"),s("code",[t._v("&hadc1")]),t._v("，adc2就输入"),s("code",[t._v("&hadc2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("ADC_ChannelConfTypeDef* sConfig 即指向ADC设置的结构体指针。我们先对"),s("code",[t._v("sConfig")]),t._v("结构体进行赋值，然后再将其指针作为参数输入函数")])])])]),t._v(" "),s("p",[t._v("这个函数非常关键，直接指明了接下来对 ADC 操作的一些详细参数，包括端口号等，所以在改变 ADC 读取数据的配置时一定要记得改一下此函数的参数，其使用例见"),s("a",{attrs:{href:"https://github.com/RoboMaster/Development-Board-C-Examples/blob/master/7.ADC_24V_power/bsp/boards/bsp_adc.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"hal-adc-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-adc-start"}},[t._v("#")]),t._v(" HAL_ADC_Start")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_ADC_Start")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("开启ADC的采样")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使ADC开始工作，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("TIM_HandleTypeDef * hadc即ADC的句柄指针，如果是adc1就输入"),s("code",[t._v("&hadc1")]),t._v("，adc2就输入"),s("code",[t._v("&hadc2")])])])])]),t._v(" "),s("h3",{attrs:{id:"hal-adc-pollforconversion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-adc-pollforconversion"}},[t._v("#")]),t._v(" HAL_ADC_PollForConversion")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_PollForConversion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" Timeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_ADC_PollForConversion")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("等待ADC转换结束")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使ADC开始工作，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("TIM_HandleTypeDef * hadc即ADC的句柄指针，如果是adc1就输入"),s("code",[t._v("&hadc1")]),t._v("，adc2就输入"),s("code",[t._v("&hadc2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("uint32_t Timeout等待的最大时间")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-adc-getvalue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-adc-getvalue"}},[t._v("#")]),t._v(" HAL_ADC_GetValue")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_ADC_GetValue")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("获取ADC值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功使ADC开始工作，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("TIM_HandleTypeDef * hadc即ADC的句柄指针，如果是adc1就输入"),s("code",[t._v("&hadc1")]),t._v("，adc2就输入"),s("code",[t._v("&hadc2")])])])])]),t._v(" "),s("h2",{attrs:{id:"串口操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#串口操作"}},[t._v("#")]),t._v(" 串口操作")]),t._v(" "),s("h3",{attrs:{id:"hal-uart-transmit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-uart-transmit"}},[t._v("#")]),t._v(" HAL_UART_Transmit")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_Transmit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UART_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("huart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" Size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" Timeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_UART_Transmit")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("从指定的串口发送一段数据")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功发送本次数据，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("UART_HandleTypeDef *huart 要进行发送的串口的句柄指针，如串口1就输入"),s("code",[t._v("&huart1")]),t._v("，串口2就输入"),s("code",[t._v("&huart2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("uint8_t *pData 要发送的数据的首地址，比如要发送"),s("code",[t._v("buf[]=”Helloword”")]),t._v("则输入"),s("code",[t._v("buf")]),t._v("，也可以直接输入要发送的字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数3")]),t._v(" "),s("td",[t._v("uint16_t Size 要发送的数据的大小，即输入的字符串的长度，也可以通过"),s("code",[t._v("sizeof")]),t._v("关键字获取数据大小")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数4")]),t._v(" "),s("td",[t._v("uint32_t Timeout 发送超时时间，如果发送时间超出该时间则取消本次发送")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-uart-receive-it"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-uart-receive-it"}},[t._v("#")]),t._v(" HAL_UART_Receive_IT")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("HAL_StatusTypeDef "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_Receive_IT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UART_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("huart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" Size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_UART_Receive_IT")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("使能一个串口的接收中断")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("HAL_StatusTypeDef，HAL库定义的几种状态，如果成功发送本次数据，则返回"),s("code",[t._v("HAL_OK")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("UART_HandleTypeDef *huart 要进行发送的串口的句柄指针，如串口1就输入"),s("code",[t._v("&huart1")]),t._v("，串口2就输入"),s("code",[t._v("&huart2")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[t._v("uint8_t *pData 要接收本次数据的缓冲变量的地址")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数3")]),t._v(" "),s("td",[t._v("uint16_t Size 要接收的数据的大小，即输入的字符串的长度，只有收够这个长度的数据才会进入中断")])])])]),t._v(" "),s("p",[t._v("这个函数需要注意的是，它才触发一次中断后会将中断标志位清除，所以需要重复调用才能持续接收")]),t._v(" "),s("h3",{attrs:{id:"hal-uart-enable-it"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-uart-enable-it"}},[t._v("#")]),t._v(" __HAL_UART_ENABLE_IT")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("__HAL_UART_ENABLE_IT")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __INTERRUPT__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__INTERRUPT__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" UART_CR1_REG_INDEX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CR1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__INTERRUPT__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" UART_IT_MASK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                                                           "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__INTERRUPT__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("28U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" UART_CR2_REG_INDEX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CR2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__INTERRUPT__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" UART_IT_MASK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n                                                           "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("CR3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__INTERRUPT__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" UART_IT_MASK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("宏名")]),t._v(" "),s("th",[t._v("__HAL_UART_ENABLE_IT")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("宏作用")]),t._v(" "),s("td",[t._v("使能某个串口中断类型")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[s("code",[t._v("__HANDLE__")]),t._v("要进行使能的串口的句柄指针，如串口1就输入"),s("code",[t._v("&huart1")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[s("code",[t._v("__INTERRUPT__")]),t._v("要使能的中断类型，"),s("code",[t._v("UART_IT_RXNE")]),t._v("接收中断，"),s("code",[t._v("UART_IT_IDLE")]),t._v("空闲中断")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-uart-get-flag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-uart-get-flag"}},[t._v("#")]),t._v(" __HAL_UART_GET_FLAG")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("__HAL_UART_GET_FLAG")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __FLAG__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__HANDLE__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Instance"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("SR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__FLAG__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__FLAG__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("宏名")]),t._v(" "),s("th",[t._v("__HAL_UART_GET_FLAG")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("宏作用")]),t._v(" "),s("td",[t._v("测试某个串口的某个 FLAG 位的状态")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("FLAG 的两种状态：SET 与 RESET")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[s("code",[t._v("__HANDLE__")]),t._v("要进行测试的串口的句柄指针，如串口1就输入"),s("code",[t._v("&huart1")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数2")]),t._v(" "),s("td",[s("code",[t._v("__FLAG__")]),t._v("是要测试的 FLAG 名称，空闲中断位是"),s("code",[t._v("UART_FLAG_IDLE")]),t._v("，基本为这个格式")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-uart-clear-idleflag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-uart-clear-idleflag"}},[t._v("#")]),t._v(" __HAL_UART_CLEAR_IDLEFLAG")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("宏名")]),t._v(" "),s("th",[t._v("__HAL_UART_GET_FLAG")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("宏作用")]),t._v(" "),s("td",[t._v("清除"),s("code",[t._v("IDLE")]),t._v("的中断标志位的宏定义")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[s("code",[t._v("__HANDLE__")]),t._v("要删除标志位的串口的句柄指针，如串口1就输入"),s("code",[t._v("&huart1")])])])])]),t._v(" "),s("h2",{attrs:{id:"中断返回函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断返回函数"}},[t._v("#")]),t._v(" 中断返回函数")]),t._v(" "),s("h3",{attrs:{id:"hal-tim-periodelapsedcallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-tim-periodelapsedcallback"}},[t._v("#")]),t._v(" HAL_TIM_PeriodElapsedCallback")]),t._v(" "),s("p",[t._v("这是定时器中断的回调函数，其原始定义为：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("__weak "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_TIM_PeriodElapsedCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TIM_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("htim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("我们需要在"),s("code",[t._v("main.c")]),t._v("或其他我们自己的位置重新定义其内容")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_TIM_PeriodElapsedCallback")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("定义定时器中断的中断执行内容")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("void")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("发生定时器中断的定时器句柄指针，是由系统在调用时自动填写的；如 "),s("code",[t._v("&htim1")]),t._v(", "),s("code",[t._v("&htim2")]),t._v(" 等")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-gpio-exit-callback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-gpio-exit-callback"}},[t._v("#")]),t._v(" HAL_GPIO_EXIT_Callback")]),t._v(" "),s("p",[t._v("这是 GPIO 外部中断的回调函数，其原始定义为：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("__weak "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_GPIO_EXTI_Callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" GPIO_Pin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("我们需要在"),s("code",[t._v("main.c")]),t._v("或其他我们自己的位置重新定义其内容")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_GPIO_EXIT_Ballback")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("定义 GPIO 外部中断的中断执行内容")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("void")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("发生外部中断的引脚(组)号，是由系统在调用时自动填写的；如 PA0, PB1 等")])])])]),t._v(" "),s("h3",{attrs:{id:"hal-uart-rxcpltcallback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hal-uart-rxcpltcallback"}},[t._v("#")]),t._v(" HAL_UART_RxCpltCallback")]),t._v(" "),s("p",[t._v("这是 UART 接收中断的回调函数，其原始定义为：")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("__weak "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_RxCpltCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UART_HandleTypeDef "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("huart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("函数名")]),t._v(" "),s("th",[t._v("HAL_UART_RxCpltCallback")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("函数作用")]),t._v(" "),s("td",[t._v("定义 UART 接收中断的内容")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("返回值")]),t._v(" "),s("td",[t._v("void")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("参数1")]),t._v(" "),s("td",[t._v("发生接收中断的串口句柄指针，是由系统在调用时自动填写的；如 "),s("code",[t._v("&huart1")]),t._v(" 等")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);