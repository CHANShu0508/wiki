(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{453:function(s,t,a){"use strict";a.r(t);var e=a(20),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"寄存器映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄存器映射"}},[s._v("#")]),s._v(" 寄存器映射")]),s._v(" "),a("blockquote",[a("p",[s._v("以 "),a("code",[s._v("STM32F103C8Tx")]),s._v(" 为例")])]),s._v(" "),a("h2",{attrs:{id:"回到起点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回到起点"}},[s._v("#")]),s._v(" 回到起点")]),s._v(" "),a("p",[s._v("这张图很早之前就已经见过了：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20200819010532.jpg"}})]),s._v(" "),a("p",[s._v("但是当时不是很懂存储器映射中一些细节相关的东西，所以今天来详细的探讨一下存储器映射。")]),s._v(" "),a("p",[s._v("很明显，ST 官方将我们的 4GB 的地址空间（32 位 -> 4GB 可以回忆一下）分为了8个 Block，每个都有相应的大致的用途：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20201114171404.png"}})]),s._v(" "),a("p",[s._v("可以提一下的是，Block0 用于分配了片上的 FLASH，也就是存储我们指令的地方。")]),s._v(" "),a("p",[s._v("而我们最需要关注的就是 Block2，这个地方是我们的片内外设的地址空间，"),a("code",[s._v("APB1")]),s._v(", "),a("code",[s._v("APB2")]),s._v(", "),a("code",[s._v("AHB")]),s._v(" 三条总线上挂载的设备对应的寄存器地址都被分配在这里。")]),s._v(" "),a("h2",{attrs:{id:"寄存器映射-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄存器映射-2"}},[s._v("#")]),s._v(" 寄存器映射")]),s._v(" "),a("h3",{attrs:{id:"排列方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排列方式"}},[s._v("#")]),s._v(" 排列方式")]),s._v(" "),a("blockquote",[a("p",[s._v("首先，来回忆一下一些基础的东西：")]),s._v(" "),a("ul",[a("li",[s._v("1 byte = 8 bit")]),s._v(" "),a("li",[s._v("1 字节 = 8 比特")]),s._v(" "),a("li",[s._v("1 位16进制 = 4 位二进制")])])]),s._v(" "),a("p",[s._v("在 STM32 上，寄存器都是（大多数）32 位的，也就是 4 个字节的！")]),s._v(" "),a("p",[s._v("ST 对于寄存器的地址的设计逻辑大概是这样：")]),s._v(" "),a("ul",[a("li",[s._v("1个单元 "),a("strong",[a("code",[s._v("包括")])]),s._v(" 4个字节")]),s._v(" "),a("li",[s._v("1个字节 "),a("strong",[a("code",[s._v("<管辖>")])]),s._v(" 8个bit")])]),s._v(" "),a("p",[s._v("也就是讲，寄存器内部的位以 "),a("code",[s._v("4个一组")]),s._v(" 为最小单位排列在明面上的存储器地址空间上：")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("┌----------------------------┐\n|寄存器1        0x0000 0000   |\n|              0x0000 0001   |\n|              0x0000 0002   |\n|              0x0000 0003   |\n├----------------------------┤\n|寄存器2        0x0000 0004   |\n|              0x0000 0005   |\n|              0x0000 0006   |\n|              0x0000 0007   |\n└----------------------------┘\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("所以把寄存器排列起来，他们的地址看起来是这样，相邻两个地址之差将会是 4：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20201114175013.png"}})]),s._v(" "),a("p",[s._v("这个 4 的差，代表的就是 4 个单元的差距、4 个字节的差距、32 位比特的差距")]),s._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"},[s._v("亘古不变的真理")]),a("ul",[a("li",[s._v("1 个寄存器  --\x3e  32 bit  --\x3e 4 byte")]),s._v(" "),a("li",[s._v("地址空间上相差 1 代表"),a("strong",[s._v("相差 1 个单元")]),s._v("，寄存器内部的相差 8 bit 的位")])])]),a("p",[s._v("这对于理解之后的一些操作，例如位带操作非常重要！")]),s._v(" "),a("p",[s._v("总之！对于地址的排列，一定要记住一句话："),a("strong",[s._v("寄存器内的比特以四个字节为一个单元")])]),s._v(" "),a("blockquote",[a("p",[s._v("马后炮：")]),s._v(" "),a("p",[s._v("寄存器操作添加一句话！！就是对于寄存器的操作总是访问他的最低地址，随后使用"),a("code",[s._v("八位十六进制")]),s._v("的方法进行操作，如果只能支持十六位一起操作，则为"),a("code",[s._v("四位十六进制")]),s._v("数进行移位操作之后得出。不支持单个比特操作，除非是位带操作")])]),s._v(" "),a("h2",{attrs:{id:"外设地址映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外设地址映射"}},[s._v("#")]),s._v(" 外设地址映射")]),s._v(" "),a("h3",{attrs:{id:"地址偏移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#地址偏移"}},[s._v("#")]),s._v(" 地址偏移")]),s._v(" "),a("p",[s._v("和偏移相对应的概念是基准，在上面我们可以看到不管是每个 Block、每条总线或者是后面的每个特定的外设，他们都会有一个地址的范围，而这个范围的开头就是它的"),a("strong",[s._v("基地址")])]),s._v(" "),a("p",[s._v("而偏移就是在基准的基础上加上的值，加上这个值后，得到的就是我们想要的地址。这两个概念很宽泛，从大到小的范围都存在基地址与偏移来确定某个较为精确的地址")]),s._v(" "),a("h3",{attrs:{id:"确定地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#确定地址"}},[s._v("#")]),s._v(" 确定地址")]),s._v(" "),a("p",[s._v("在大的范围，从 Block2 出发，这个下属的每条总线均有有一个基地址：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20201114183110.png"}})]),s._v(" "),a("p",[s._v("在小的范围，每个 GPIO 的外设也会有一个基地址：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20201114183454.png"}})]),s._v(" "),a("p",[s._v("上面两个图表的第三栏均为每个设备相对于每个大的范围的基地址的偏移量。")]),s._v(" "),a("h3",{attrs:{id:"外设寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外设寄存器"}},[s._v("#")]),s._v(" 外设寄存器")]),s._v(" "),a("p",[s._v("看这张图：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20201114184023.png"}})]),s._v(" "),a("p",[s._v("以最常用的对 GPIO 置位与复位的寄存器 "),a("code",[s._v("BSRR")]),s._v(" 为例看一下 datasheet：")]),s._v(" "),a("div",{attrs:{align:"center"}},[a("img",{staticStyle:{zoom:"75%"},attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20201114184158.png"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("其中标号②也就是我们的相对于 GPIOB 的偏移量；")])]),s._v(" "),a("li",[a("p",[s._v("③为寄存器位表，需要关注的内容是中间的名称与下方的读写权限：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("BRy")]),s._v(" 是从 "),a("code",[s._v("GPIOx_Pin0~GPIOx+Pin15")]),s._v(" 的复位寄存器；"),a("code",[s._v("BSy")]),s._v(" 是从 "),a("code",[s._v("GPIOx_Pin0~GPIOx+Pin15")]),s._v(" 的置位寄存器")]),s._v(" "),a("li",[s._v("读写权限："),a("code",[s._v("w")]),s._v(" 表示只写，"),a("code",[s._v("r")]),s._v(" 表示只读，"),a("code",[s._v("rw")]),s._v(" 表示可读写")])])]),s._v(" "),a("li",[a("p",[s._v("我们主要关注的是标号④的内容：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("BRy")]),s._v(" 引脚的说明是“"),a("strong",[s._v("0")]),s._v("：不会对相应的 "),a("code",[s._v("ODRx")]),s._v(" 位执行任何操作；"),a("strong",[s._v("1")]),s._v("：对相应 "),a("code",[s._v("ODRx")]),s._v("\n位进行复位”。这里的“复位”是将该位设置为 0 的意思，而“置位”表示将该位设置为\n1；说明中的 "),a("code",[s._v("ODRx")]),s._v(" 是另一个寄存器的寄存器位，我们只需要知道 "),a("code",[s._v("ODRx")]),s._v(" 位为 1 的时候，\n对应的引脚 x 输出高电平，为 0 的时候对应的引脚输出低电平即可(感兴趣的读者可以查询该寄存器 "),a("code",[s._v("GPIOx_ODR")]),s._v(" 的说明了解)。")]),s._v(" "),a("p",[s._v("所以，如果对 "),a("code",[s._v("BR0")]),s._v(" 写入“1”的话，那么 "),a("code",[s._v("GPIOx")]),s._v(" 的第\n0 个引脚就会输出“低电平”，但是对 "),a("code",[s._v("BR0")]),s._v(" 写入“0”的话，却不会影响 "),a("code",[s._v("ODR0")]),s._v(" 位，所以引\n脚电平不会改变。要想该引脚输出“高电平”，就需要对 "),a("code",[s._v("BS0")]),s._v(" 位写入“1”，寄存器位\n"),a("code",[s._v("BSy")]),s._v(" 与 "),a("code",[s._v("BRy")]),s._v(" 是相反的操作。")])])])])]),s._v(" "),a("h2",{attrs:{id:"对寄存器赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对寄存器赋值"}},[s._v("#")]),s._v(" 对寄存器赋值")]),s._v(" "),a("p",[s._v("对上面的例子而言，如果我们想要 "),a("code",[s._v("BPIOB_Pin5")]),s._v(" 输出高电平，应该先找到这个引脚的 "),a("code",[s._v("BSRR")]),s._v(" 寄存器的地址：")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0x4001 0C00 + 0x10 = 0x4001 0C10\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这个语句就是：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x40010C10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x0001")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("要点有：")]),s._v(" "),a("ul",[a("li",[s._v("首先要看清楚 datasheet，这些寄存器只支持以 16 位的形式进行操作")]),s._v(" "),a("li",[s._v("由于 "),a("code",[s._v("0x40010C10")]),s._v(" 单单这个数字放在这里谁也不知道这是啥，所以要强制类型转化为数值指针类型的值")]),s._v(" "),a("li",[s._v("随后使用 "),a("code",[s._v("*")]),s._v(" 来得到这个指针的值并对它赋值")])]),s._v(" "),a("h2",{attrs:{id:"对寄存器的封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对寄存器的封装"}},[s._v("#")]),s._v(" 对寄存器的封装")]),s._v(" "),a("h3",{attrs:{id:"每个层级的基地址宏定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每个层级的基地址宏定义"}},[s._v("#")]),s._v(" 每个层级的基地址宏定义")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 外设基地址 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("PERIPH_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x40000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 总线基地址 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("APB1PERIPH_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("PERIPH_BASE")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("APB2PERIPH_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x00010000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("AHBPERIPH_BASE")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x00020000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* GPIO 外设基地址 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOA_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x0800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x0C00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOC_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOD_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x1400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOE_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x1800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOF_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x1C00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOG_BASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("APB2PERIPH_BASE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 寄存器基地址，以GPIOB 为例 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_CRL")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x00")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_CRH")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x04")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_IDR")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x08")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_ODR")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x0C")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_BSRR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_BRR")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("GPIOB_LCKR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("这样一来，我们就对从最上层的 Block2 到最底层的每个 "),a("code",[s._v("GPIOB")]),s._v(" 的寄存器地址进行了封装，从而不必再记忆每个寄存器的地址，而上面控制 "),a("code",[s._v("GPIOB_Pin5")]),s._v(" 的代码也就变成了：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 控制GPIOB 引脚0 输出低电平(BSRR 寄存器的BR5 置1) */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("GPIOB_BSRR "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (16+0) 中的 16 是由于 BR 寄存器组在高 16 位")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 控制GPIOB 引脚0 输出高电平(BSRR 寄存器的BS0 置1) */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("GPIOB_BSRR "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 读取GPIOB 端口所有引脚的电平(读IDR 寄存器) */")]),s._v("\ntemp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("GPIOB_IDR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("但是如果使用的外设一多，这种方法需要将每个具体的外设的具体的寄存器都定义出来，不是很方便，所以经常使用的是以下方法，也就是大名鼎鼎的标准外设库")]),s._v(" "),a("h3",{attrs:{id:"使用结构体封装寄存器列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用结构体封装寄存器列表"}},[s._v("#")]),s._v(" 使用结构体封装寄存器列表")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*无符号32 位变量*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*无符号16 位变量*/")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* GPIO 寄存器列表 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" CRL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 端口配置低寄存器 地址偏移: 0x00 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" CRH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 端口配置高寄存器 地址偏移: 0x04 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" IDR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 数据输入寄存器 地址偏移: 0x08 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" ODR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 数据输出寄存器 地址偏移: 0x0C */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" BSRR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 位设置/清除寄存器 地址偏移: 0x10 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" BRR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 端口位清除寄存器 地址偏移: 0x14 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" LCKR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*GPIO 端口配置锁定寄存器 地址偏移: 0x18 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" GPIO_TypeDef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("C 语言的语法规定，结构体内变量的存储空间是连续的，其中 32 位的变量占用 4 个字节，16 位的变量占用 2 个字节，这么一来：")]),s._v(" "),a("p",[s._v("如果定义一个结构体指针量 "),a("code",[s._v("GPIO_TyprDef *GPIO_Init")]),s._v(" ，并将它的地址指定为某个 GPIO 的基地址，结构体内部的存储空间大小刚好按照真实的偏移量定义好了这些寄存器的地址就是真实的寄存器地址，随后就只需要对结构体内的元素进行读写即可达到操控寄存器的目的：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("GPIO_TypeDef "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" GPIOx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义一个GPIO_TypeDef 型结构体指针GPIOx")]),s._v("\nGPIOx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" GPIOB_BASE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//把指针地址设置为宏GPIOH_BASE 地址")]),s._v("\nGPIOx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("IDR "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0xFFFF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也就是 1111 1111 1111 1111")]),s._v("\nGPIOx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ODR "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0xFFFF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ntemp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" GPIOx"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("IDR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//读取GPIOB_IDR 寄存器的值到变量temp 中")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("STM32 的固件库实际上就做了这个工作，而且要比这些要复杂许多，但是思想就是这样")])])}),[],!1,null,null,null);t.default=n.exports}}]);