(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{459:function(t,s,a){"use strict";a.r(s);var n=a(20),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("本文部分转载自"),a("a",{attrs:{href:"https://blog.csdn.net/xuzhexing/article/details/90137754?biz_id=102&utm_term=STM32%20%E4%B9%8B%20HAL%E5%BA%93&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-90137754&spm=1018.2118.3001.4187",target:"_blank",rel:"noopener noreferrer"}},[t._v("STM32 之 HAL库"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("如有侵权请联系博主删除")])]),t._v(" "),a("h2",{attrs:{id:"区别于标准库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别于标准库"}},[t._v("#")]),t._v(" 区别于标准库")]),t._v(" "),a("h3",{attrs:{id:"句柄"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#句柄"}},[t._v("#")]),t._v(" 句柄")]),t._v(" "),a("p",[t._v("相较于标准库，HAL 库中的外设可以全程挂载在一个结构体上而不是通过 "),a("code",[t._v("init")]),t._v(" 函数初始化后就还是基于寄存器的操作了。这个句柄指向设定这个外设的结构体")]),t._v(" "),a("p",[t._v("以 USART 为例，首先要初始化它们的各个寄存器：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t  USART_TypeDef                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART registers base address        */")]),t._v("\n\t  UART_InitTypeDef              Init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART communication parameters      */")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pTxBuffPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< Pointer to UART Tx transfer Buffer */")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("                      TxXferSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Tx Transfer size              */")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("                      TxXferCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Tx Transfer Counter           */")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pRxBuffPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< Pointer to UART Rx transfer Buffer */")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("                      RxXferSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Rx Transfer size              */")]),t._v("\n\t  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v("                      RxXferCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Rx Transfer Counter           */")]),t._v("  \n\t  DMA_HandleTypeDef             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hdmatx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Tx DMA Handle parameters      */")]),t._v(" \n\t  DMA_HandleTypeDef             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hdmarx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Rx DMA Handle parameters      */")]),t._v("\n\t  HAL_LockTypeDef               Lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< Locking object                     */")]),t._v("\n\t  __IO HAL_UART_StateTypeDef    State"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART communication state           */")]),t._v("\n\t  __IO "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v("                 ErrorCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*!< UART Error code                    */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("UART_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("作为比较，如果使用标准库操作，需要的过程是这样：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("USART_InitTypeDef USART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nUSART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("USART_BaudRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//串口波特率")]),t._v("\nUSART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("USART_WordLength "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" USART_WordLength_8b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字长为8位数据格式")]),t._v("\nUSART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("USART_StopBits "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" USART_StopBits_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个停止位")]),t._v("\nUSART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("USART_Parity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" USART_Parity_No"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无奇偶校验位")]),t._v("\nUSART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("USART_HardwareFlowControl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" USART_HardwareFlowControl_None"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无硬件数据流控制")]),t._v("\nUSART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("USART_Mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" USART_Mode_Rx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" USART_Mode_Tx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//收发模式")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("USART_Init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("USART3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("USART_InitStructure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化串口1")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("我们发现，与标准库不同的是，该成员不仅 :")]),t._v(" "),a("ul",[a("li",[t._v("包含了之前标准库就有的六个成员（波特率，数据格式等），")]),t._v(" "),a("li",[t._v("还包含过采样、（发送或接收的）数据缓存、数据指针、串口 DMA 相关的变量、各种标志位等等要在整个项目流程中都要设置的各个成员。\n"),a("strong",[t._v("该 UART1_Handler 就被称为串口的句柄，它被贯穿整个 USART 收发的流程")]),t._v("，比如开启中断：")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_Receive_IT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("UART1_Handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("aRxBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RXBUFFERSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("比如后面要讲到的 MSP 与 Callback 回调函数：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_MspInit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UART_HandleTypeDef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("huart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_RxCpltCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UART_HandleTypeDef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("huart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("在这些函数中，只需要调用初始化时定义的句柄 UART1_Handler 就好")]),t._v(" "),a("h3",{attrs:{id:"msp函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#msp函数"}},[t._v("#")]),t._v(" MSP函数")]),t._v(" "),a("div",{staticClass:"custom-block theorem"},[a("p",{staticClass:"title"},[t._v("MSP函数")]),a("p",[t._v("MCU Specific Package 单片机的具体方案")])]),a("p",[a("strong",[t._v("MSP 是指和 MCU 相关的初始化")]),t._v("，引用一下正点原子的解释：")]),t._v(" "),a("blockquote",[a("p",[t._v("我们要初始化一个串口，首先要设置和 MCU 无关的东西，例如波特率，奇偶校验，停止位等，这些参数设置和 MCU 没有任何关系，可以使用 STM32F1，也可以是 STM32F2/F3/F4/F7\n上的串口。而一个串口设备它需要一个 MCU 来承载，例如用 STM32F4 来做承载，PA9 做为发送，PA10 做为接收，MSP 就是要初始化 STM32F4 的 PA9，PA10，配置这两个引脚")])]),t._v(" "),a("p",[t._v("所以 HAL驱动方式的初始化流程就是：")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("HAL_USART_Init()")]),t._v("—>"),a("code",[t._v("HAL_USART_MspInit()")]),t._v("，先初始化与 MCU 无关的串口协议，再初始化与 MCU 相关的串口引脚。")])]),t._v(" "),a("p",[t._v("在 STM32 的 HAL 驱动中 "),a("code",[t._v("HAL_PPP_MspInit()")]),t._v("作为回调，被 "),a("code",[t._v("HAL_PPP_Init()")]),t._v(" 函数所调用。当我们需要移植程序到 STM32F1 平台的时候，我们只需要修改 "),a("code",[t._v("HAL_PPP_MspInit")]),t._v(" 函数内容而不需要修改 "),a("code",[t._v("HAL_PPP_Init")]),t._v("入口参数内容")]),t._v(" "),a("p",[t._v("在 HAL 库中，几乎每初始化一个外设就需要设置该外设与单片机之间的联系，比如 IO 口，是否复用等等，可见，HAL 库相对于标准库多了 MSP 函数之后，移植性非常强，但与此同时却增加了代码量和代码的嵌套层级。可以说各有利弊。")]),t._v(" "),a("p",[t._v("同样，MSP 函数又可以配合句柄，达到非常强的移植性：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("void HAL_UART_MspInit(UART_HandleTypeDef *huart);\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("入口参数仅仅需要一个串口句柄，这样有能看出句柄的方便。")]),t._v(" "),a("h3",{attrs:{id:"回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调函数"}},[t._v("#")]),t._v(" 回调函数")]),t._v(" "),a("p",[t._v("还是以 USART 为例，在"),a("strong",[t._v("标准库")]),t._v("中，串口中断了以后，我们要先在中断中判断是否是接收中断，然后读出数据，顺便清除中断标志位，然后再是对数据的处理，这样如果我们在一个中断函数中写这么多代码，就会显得很混乱：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("USART3_IRQHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//串口1中断服务程序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tu8 Res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("USART_GetITStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("USART3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USART_IT_RXNE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" RESET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接收中断(接收到的数据必须是0x0d 0x0a结尾)")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tRes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("USART_ReceiveData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("USART3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//读取接收到的数据")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*数据处理区*/")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   \t\t \n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("而在 HAL 库中，进入串口中断后，直接由 "),a("strong",[t._v("HAL 库中断函数")]),t._v("进行托管：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("USART1_IRQHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                \t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*By the way，这个函数就是中断发生后的入口函数*/")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_IRQHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("UART1_Handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用HAL库串口中断处理公用函数")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/***************省略无关代码****************/")]),t._v("\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("code",[t._v("HAL_UART_IRQHandler")]),t._v("这个函数完成了判断是哪个中断（接收？发送？或者其他），然后"),a("strong",[t._v("读出数据")]),t._v("，"),a("strong",[t._v("保存至缓存区")]),t._v("，顺便"),a("strong",[t._v("清除中断标志位")]),t._v("等等操作。\n比如我提前设置了，串口每接收五个字节，我就要对这五个字节进行处理。\n在一开始我定义了一个串口接收缓存区：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*HAL库使用的串口接收缓冲,处理逻辑由HAL库控制，接收完这个数组就会调用HAL_UART_RxCpltCallback进行处理这个数组*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*RXBUFFERSIZE=5*/")]),t._v("\nu8 aRxBuffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RXBUFFERSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("在初始化中，我在句柄里设置好了缓存区的地址，缓存大小（五个字节）")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*该代码在HAL_UART_Receive_IT函数中，初始化时会引用*/")]),t._v("\n\thuart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pRxBuffPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//aRxBuffer")]),t._v("\n    huart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("RxXferSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//RXBUFFERSIZE")]),t._v("\n    huart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("RxXferCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//RXBUFFERSIZE")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("则在接收数据中，每接收完五个字节，"),a("code",[t._v("HAL_UART_IRQHandler")]),t._v(" 才会执行一次 Callback 函数：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_UART_RxCpltCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UART_HandleTypeDef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("huart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("在这个 Callback 回调函数中，我们只需要对这接收到的五个字节（保存在 "),a("code",[t._v("aRxBuffer[]")]),t._v(" 中）进行处理就好了，完全不用再去手动清除标志位等操作。\n所以说 "),a("strong",[t._v("Callback 函数是一个应用层代码的函数")]),t._v("，我们在一开始只设置句柄里面的各个参数，然后就等着 HAL 库把自己安排好的代码送到手中就可以了~")]),t._v(" "),a("p",[t._v("综上，从这三个小点就可以看出 HAL 库的可移植性之强大，并且用户可以完全不去理会底层各个寄存器的操作，代码也更有逻辑性。但与此带来的是复杂的代码量，极慢的编译速度，略微低下的效率。看怎么取舍了")]),t._v(" "),a("h2",{attrs:{id:"hal库结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hal库结构"}},[t._v("#")]),t._v(" HAL库结构")]),t._v(" "),a("h3",{attrs:{id:"文件结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件结构"}},[t._v("#")]),t._v(" 文件结构")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20200923183517.png"}})]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[a("code",[t._v("stm32f4xx.h")])]),t._v(" 主要包含 STM32 同系列芯片的不同具体型号的定义，是否使用 HAL 库等的定义，接着，其会根据定义的芯片信号包含具体的芯片型号的头文件：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STM32F405xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stm32f405xx.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("elif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STM32F415xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stm32f415xx.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("elif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STM32F407xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stm32f407xx.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("elif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STM32F417xx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stm32f417xx.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Please select first the target STM32F4xx device used in your application (in stm32f2xx.h file)"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("紧接着，其会包含 stm32f4xx_hal.h：")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("stm32f4xx_hal.h")])]),t._v("："),a("code",[t._v("stm32f4xx_hal.c/h")]),t._v(" 主要实现 HAL 库的初始化、系统滴答相关函数、及 CPU 的调试模式配置")])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("stm32f4xx_hal_conf.h")])]),t._v("：该文件是一个用户级别的配置文件，用来实现对 HAL 库的裁剪，其位于用户文件目录，不要放在库目录中")])])]),t._v(" "),a("p",[t._v("接下来对于 HAL 库的源码文件进行一下说明，HAL 库文件名均以 stm32f4xx_hal 开头，后面加上 _ 外设或者模块名（如：stm32f4xx_hal_adc.c）：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("库文件：")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("stm32f4xx_hal_ppp.c/.h")])]),t._v(" ：主要的外设或者模块的驱动源文件，包含了该外设的通用 API\n"),a("strong",[t._v("stm32f4xx_hal_ppp_ex.c/.h")]),t._v(" // 外围设备或模块驱动程序的扩展文件。这组文件中包含特定型号或者系列的芯片的特殊 API。以及如果该特定的芯片内部有不同的实现方式，则该文件中的特殊 API 将覆盖 _ppp 中的通用 API")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("stm32f4xx_hal.c/.h")])]),t._v("：此文件用于 HAL 初始化，并且包含 DBGMCU、重映射和基于 systick 的时间延迟等相关的 API")])])]),t._v(" "),a("li",[a("strong",[t._v("其他库文件")]),t._v("：\n"),a("ul",[a("li",[t._v("用户级别文件：\n"),a("ul",[a("li",[a("strong",[a("code",[t._v("stm32f4xx_hal_msp_template.c")])]),t._v("： 只有 "),a("code",[t._v(".c")]),t._v("没有 "),a("code",[t._v(".h")]),t._v("。它包含用户应用程序中使用的外设的 MSP 初始化和反初始化（主程序和回调函数）。使用者复制到自己目录下使用模板")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("stm32f4xx_hal_conf_template.h")])]),t._v("： 用户级别的库配置文件模板。使用者复制到自己目录下使用")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("system_stm32f4xx.c")])]),t._v("：此文件主要包含 "),a("code",[t._v("SystemInit()")]),t._v(" 函数，该函数在刚复位及跳到 main 之前的启动过程中被调用。"),a("strong",[t._v("它不在启动时配置系统时钟（与标准库相反）")]),t._v("。时钟的配置在用户文件中使用 HAL API 来完成")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("startup_stm32f4xx.s")])]),t._v("：芯片启动文件，主要包含堆栈定义，终端向量表等")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("stm32f4xx_it.c/.h")])]),t._v("：中断处理函数的相关实现")])])])])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("main.c/.h")])])])]),t._v(" "),a("h3",{attrs:{id:"命名规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名规则"}},[t._v("#")]),t._v(" 命名规则")]),t._v(" "),a("p",[t._v("根据 HAL 库的命名规则，其 API 可以分为以下三大类：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("初始化 / 反初始化函数")]),t._v("："),a("code",[t._v("HAL_PPP_Init()")]),t._v(", "),a("code",[t._v("HAL_PPP_DeInit()")])]),t._v(" "),a("li",[a("strong",[t._v("IO 操作函数")]),t._v("："),a("code",[t._v("HAL_PPP_Read()")]),t._v(", "),a("code",[t._v("HAL_PPP_Write()")]),t._v(", "),a("code",[t._v("HAL_PPP_Transmit()")]),t._v(", "),a("code",[t._v("HAL_PPP_Receive()")])]),t._v(" "),a("li",[a("strong",[t._v("控制函数")]),t._v("："),a("code",[t._v("HAL_PPP_Set ()")]),t._v(", "),a("code",[t._v("HAL_PPP_Get ()")])]),t._v(" "),a("li",[a("strong",[t._v("状态和错误")]),t._v(" :  "),a("code",[t._v("HAL_PPP_GetState ()")]),t._v(", "),a("code",[t._v("HAL_PPP_GetError ()")])])]),t._v(" "),a("h2",{attrs:{id:"三种编程方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种编程方式"}},[t._v("#")]),t._v(" 三种编程方式")]),t._v(" "),a("p",[t._v("HAL 库对所有的函数模型也进行了统一。在 HAL 库中，支持三种编程模式："),a("strong",[t._v("轮询模式、中断模式、DMA 模式")]),t._v("（如果外设支持）。其分别对应如下三种类型的函数（以 ADC 为例）：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("HAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nHAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nHAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Start_IT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nHAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Stop_IT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nHAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Start_DMA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" Length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nHAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_ADC_Stop_DMA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ADC_HandleTypeDef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" hadc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("其中，"),a("strong",[t._v("带 _IT 的表示工作在中断模式下")]),t._v("；"),a("strong",[t._v("带 _DMA 的工作在 DMA 模式下")]),t._v("（注意：DMA 模式下也是开中断的）："),a("strong",[t._v("什么都没带的就是轮询模式")]),t._v("（没有开启中断的）。至于使用者使用何种方式，就看自己的选择了")]),t._v(" "),a("p",[t._v("此外，新的 HAL 库架构下统一采用宏的形式对各种中断等进行配置（原来标准外设库一般都是各种函数）。针对每种外设主要由以下宏：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("__HAL_PPP_ENABLE_IT(HANDLE, INTERRUPT)")]),t._v("：使能一个指定的外设中断")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_DISABLE_IT(HANDLE, INTERRUPT)")]),t._v("：失能一个指定的外设中断")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_GET_IT (HANDLE, __ INTERRUPT __)")]),t._v("：获得一个指定的外设中断状态")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_CLEAR_IT (HANDLE, __ INTERRUPT __)")]),t._v("：清除一个指定的外设的中断状态")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_GET_FLAG (HANDLE, FLAG)")]),t._v("：获取一个指定的外设的标志状态")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_CLEAR_FLAG (HANDLE, FLAG)")]),t._v("：清除一个指定的外设的标志状态")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_ENABLE(HANDLE)")]),t._v("：使能外设")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_DISABLE(HANDLE)")]),t._v("：失能外设")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_XXXX (HANDLE, PARAM)")]),t._v("：指定外设的宏定义")]),t._v(" "),a("li",[a("code",[t._v("__HAL_PPP_GET_IT_SOURCE (HANDLE, __ INTERRUPT __)")]),t._v("：检查中断源")])]),t._v(" "),a("h2",{attrs:{id:"三大回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大回调函数"}},[t._v("#")]),t._v(" 三大回调函数")]),t._v(" "),a("p",[t._v("在 HAL 库的源码中，到处可见一些以 "),a("code",[t._v("__weak")]),t._v("开头的函数，而且这些函数，有些已经被实现了，比如：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("__weak HAL_StatusTypeDef "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_InitTick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" TickPriority"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Configure the SysTick to have interrupt in 1ms time basis*/")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_SYSTICK_Config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SystemCoreClock"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Configure the SysTick IRQ priority */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_NVIC_SetPriority")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SysTick_IRQn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TickPriority "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Return function status */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" HAL_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("有些则没有被实现，例如：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("__weak "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("HAL_SPI_TxCpltCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SPI_HandleTypeDef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("hspi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Prevent unused argument(s) compilation warning */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UNUSED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hspi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* NOTE : This function should not be modified, when the callback is needed,the HAL_SPI_TxCpltCallback should be implemented in the user file\n  */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("所有带有 "),a("code",[t._v("__weak")]),t._v(" 关键字的函数表示，就可以由用户自己来实现。如果出现了同名函数，且不带 "),a("code",[t._v("__weak")]),t._v(" 关键字，那么连接器就会采用外部实现的同名函数。\n通常来说，HAL 库负责整个处理和 MCU 外设的处理逻辑，并将必要部分以回调函数的形式给出到用户，用户只需要在对应的回调函数中做修改即可。HAL 库包含如下三种用户级别回调函数（PPP 为外设名）：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("外设系统级初始化 / 解除初始化回调函数")]),t._v("（用户代码的第二大部分：对于 MSP 的处理）："),a("code",[t._v("HAL_PPP_MspInit()")]),t._v(" 和 "),a("code",[t._v("HAL_PPP_MspDeInit")])]),t._v(" "),a("blockquote",[a("p",[t._v("例如："),a("code",[t._v("__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)")])])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("HAL_PPP_Init()")]),t._v(" 函数中被调用，用来初始化底层相关的设备（GPIOs, clock, DMA, interrupt）")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("处理完成回调函数")]),t._v("："),a("code",[t._v("HAL_PPP_ProcessCpltCallback*")]),t._v("（Process 指具体某种处理，如 UART 的 Tx）")]),t._v(" "),a("blockquote",[a("p",[t._v("例如："),a("code",[t._v("__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)")])])]),t._v(" "),a("p",[t._v("当外设或者 DMA 工作完成后时，触发中断，该回调函数会在外设中断处理函数或者 DMA 的中断处理函数中被调用")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("错误处理回调函数")]),t._v("："),a("code",[t._v("HAL_PPP_ErrorCallback")])]),t._v(" "),a("blockquote",[a("p",[t._v("例如："),a("code",[t._v("__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)")])])]),t._v(" "),a("p",[t._v("当外设或者 DMA 出现错误时，触发终端，该回调函数会在外设中断处理函数或者 DMA 的中断处理函数中被调用")])])]),t._v(" "),a("p",[a("strong",[t._v("绝大多数用户代码均在以上三大回调函数中实现。")])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("HAL 库结构中，在每次初始化前（尤其是在多次调用初始化前），先调用对应的"),a("strong",[t._v("反初始化")]),t._v("（DeInit）函数是非常有必要的。\n某些外设多次初始化时不调用返回会导致初始化失败。完成回调函数有多中，例如串口的完成回调函数有"),a("code",[t._v("HAL_UART_TxCpltCallback")]),t._v(" 和 "),a("code",[t._v("HAL_UART_TxHalfCpltCallback")]),t._v(" 等\n（用户代码的第三大部分：对于上面第二点和第三点的各种回调函数的处理）\n在实际使用中，发现 HAL 仍有不少问题，例如在使用 USB 时，其库配置存在问题")])])}),[],!1,null,null,null);s.default=e.exports}}]);