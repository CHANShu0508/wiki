(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{421:function(s,t,a){"use strict";a.r(t);var n=a(20),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-0-什么是预处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-什么是预处理器"}},[s._v("#")]),s._v(" 1.0 什么是预处理器")]),s._v(" "),a("p",[s._v("我们编写的C程序在编译之前通常需要经过预处理器处理变成处理后的C程序，然后再进入编译器。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/CHANShu0508/images_shack/images/20200816160239.png",alt:"流程"}})]),s._v(" "),a("p",[s._v("预处理器通常会对我们所写的程序中的预处理指令进行替换，我们最为熟悉的就是 "),a("code",[s._v("#define")]),s._v(" 这个预处理指令，举个例子：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")])])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The max is %d.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("将会被处理为：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* stdio.h引入的行 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 空行 */")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The max is %d.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("预处理器将我们的预处理指令执行或者在程序之内替换之后删除了，但是行依然保留；而且程序内调用宏定义的地方都替换为宏所代表的东西")]),s._v(" "),a("h2",{attrs:{id:"_2-0-预处理指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-0-预处理指令"}},[s._v("#")]),s._v(" 2.0 预处理指令")]),s._v(" "),a("p",[s._v("预处理指令主要有3种类型：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("宏定义")]),s._v("：也就是 "),a("code",[s._v("define")]),s._v(" 与 "),a("code",[s._v("undef")]),s._v(" 对宏指令的定义与删除")]),s._v(" "),a("li",[a("strong",[s._v("文件包含")]),s._v("：熟悉的 "),a("code",[s._v("#include")]),s._v(" 指令将一个文件包含到程序中")]),s._v(" "),a("li",[a("strong",[s._v("条件编译")]),s._v("：诸如 "),a("code",[s._v("#if")]),s._v(" 、 "),a("code",[s._v("#endif")]),s._v(" 、 "),a("code",[s._v("#ifdef")]),s._v(" 与 "),a("code",[s._v("#elif")]),s._v(" 等等根据条件来判断是否将某段代码包含到程序中")])]),s._v(" "),a("p",[s._v("此外还有不是很常用的 "),a("code",[s._v("#error")]),s._v(" 、 "),a("code",[s._v("#line")]),s._v(" 和 "),a("code",[s._v("#pragma")]),s._v(" 这篇文章都会讲到")]),s._v(" "),a("p",[s._v("对于预处理器指令，有如下特征：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("它们都以 # 开头")]),s._v("，要求就是#之前有空白字符即可认为它是一个预处理指令的开始")]),s._v(" "),a("li",[a("strong",[s._v("预处理指令内部可以添加任意数量的空格与制表符")]),s._v("，例如 "),a("code",[s._v("# define N 5")]),s._v(" 是合法的")]),s._v(" "),a("li",[a("strong",[s._v("预处理指令总是在第一个换行符的地方结束")]),s._v("，如果要延续，在本行末尾使用 "),a("code",[s._v("\\")]),s._v(" 即可")]),s._v(" "),a("li",[a("strong",[s._v("预处理指令可以出现在程序的任何地方")]),s._v("，作用范围则是从出现出到整个程序结束")])]),s._v(" "),a("h2",{attrs:{id:"_3-0-宏定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-宏定义"}},[s._v("#")]),s._v(" 3.0 宏定义")]),s._v(" "),a("p",[s._v("下面就开始讨论三种预处理指令中的第一种——宏定义")]),s._v(" "),a("h3",{attrs:{id:"_3-1-简单的宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-简单的宏"}},[s._v("#")]),s._v(" 3.1 简单的宏")]),s._v(" "),a("p",[s._v("就是我们最常用的："),a("strong",[a("code",[s._v("#define 标识符 替换列表")])]),s._v("\n我们的替换列表可以替换包括标识符、关键字、数值常量、字符常量、字符串字面量、操作符和排列在内的内容，在经预处理器处理时，将会把标识符替换为替换列表中的内容。")]),s._v(" "),a("p",[s._v("对于定义宏表示的方法有几个显著的优点：")]),s._v(" "),a("ul",[a("li",[s._v("使程序更易读，不至于出现很多莫名其妙的“magic number”")]),s._v(" "),a("li",[s._v("程序的修改与可移植性会有所提高")]),s._v(" "),a("li",[s._v("对类型重命名，就像 "),a("code",[s._v("#define BOOL int")]),s._v(" 这样")]),s._v(" "),a("li",[s._v("简便的控制条件编译（后面会提到）")])]),s._v(" "),a("h3",{attrs:{id:"_3-2-带参数的宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-带参数的宏"}},[s._v("#")]),s._v(" 3.2 带参数的宏")]),s._v(" "),a("p",[a("strong",[a("code",[s._v("#define 标识符(x1, x2, ..., xn) 替换列表")])])]),s._v(" "),a("p",[a("strong",[s._v("需要注意的是")]),s._v("：在标识符与左括号之间不可以有空白字符，如果有将会被认为是一个简单的宏，后面的整体将会被认作替换列表；")]),s._v(" "),a("p",[s._v("其实相对于普通的宏的不同之处就是带参数的宏可以在调用时给替换列表内部的参数赋值，从而更加灵活，因此也就常用于定义一些类函数的宏。用它来代替真正的函数有这几种优点：")]),s._v(" "),a("ul",[a("li",[s._v("程序的速度会稍微快一些")]),s._v(" "),a("li",[s._v("宏相较于函数更加通用，因为宏没有指定数值的类型")])]),s._v(" "),a("p",[s._v("同时也存在一些缺点：")]),s._v(" "),a("ul",[a("li",[s._v("宏没有类型检查，这是优点的同时也是一种缺点")]),s._v(" "),a("li",[s._v("指针不可以指向宏")]),s._v(" "),a("li",[a("strong",[s._v("宏可能会不止一次地计算它的参数")]),s._v("，例如：")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("MAX")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n在调用时：\nn "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("   n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可见实际上变量 i 自增了两次。这就是一种副作用")]),s._v(" "),a("h4",{attrs:{id:"_3-2-1-当参数为空时-c99"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-当参数为空时-c99"}},[s._v("#")]),s._v(" 3.2.1 当参数为空时（C99）")]),s._v(" "),a("p",[s._v("C99 允许了宏的参数为空的情况。在调用时在某个参数的位置不填任何字符即可，但是需要的逗号不能少。")]),s._v(" "),a("p",[s._v("正常的空参数情况就是这个参数的位置就被略过了，什么都没有， 例如：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("MULTI")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n\n调用时：\ni "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MULTI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当空参数是#与##运算符（3.4节）的时候：")]),s._v(" "),a("ul",[a("li",[s._v("当是#的操作数，则其为空字符串 "),a("code",[s._v('""')]),s._v(" 只有 "),a("code",[s._v("\\0")]),s._v(" 而已。")]),s._v(" "),a("li",[s._v("当是##的操作数，结果就是那个空参数的位置会被略过，剩余的其他参数结合形成结果")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("JOIN")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("##")]),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("##")]),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("z")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("JOIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("JOIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("JOIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n结果就是：abc、ac、bc\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_3-2-2-参数可变的宏-c99"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-参数可变的宏-c99"}},[s._v("#")]),s._v(" 3.2.2 参数可变的宏（C99）")]),s._v(" "),a("p",[s._v("在C99中加入了特性宏的参数个数是可变的，也就是形如如下形式：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("TEST")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Passed the test: %s\\n"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" #condition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__VA_ARGS__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("我们使用省略号 "),a("code",[s._v("...")]),s._v(" 放在参数列表的最后，用来作为调用的时候输入的除了第一个实参的参数（们）的形参，因此调用这个宏至少需要两个参数，但是省略号代替的参数可以为空；而 "),a("code",[s._v("__VA_ARGS__")]),s._v(" 是一个专用的标识符，只能出现在具有可变个数参数的宏的替换列表内，代表所有与省略号对应的参数。")]),s._v(" "),a("p",[s._v("在调用的时候：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TEST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("power "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" max_power"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Power %d exceeds %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" power"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" max_power"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("预处理之后就是：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("power "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" max_power"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Passed the test: %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"power <= max_power"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Power %d exceeds %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" power"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" max_power"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("也就是当力大小在允许的范围之内的时候，输出“符合条件：实际力 <= 许用力”；在力超出范围的时候，输出力的大小值超过了许用力的大小。")]),s._v(" "),a("h3",{attrs:{id:"_3-3-宏定义中的圆括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-宏定义中的圆括号"}},[s._v("#")]),s._v(" 3.3 宏定义中的圆括号")]),s._v(" "),a("p",[s._v("你可能已经观察到了，在我们定义 "),a("code",[s._v("MAX")]),s._v(" 宏的时候，我们用到了很多圆括号，这是加上就是为了防止本意被程序曲解，所以有以下"),a("strong",[s._v("两个原则")]),s._v("：")]),s._v(" "),a("ol",[a("li",[s._v("如果宏的"),a("strong",[s._v("替换列表中有运算符")]),s._v("，那么整个替换列表需要放在括号中")]),s._v(" "),a("li",[s._v("如果"),a("strong",[s._v("宏有参数")]),s._v("，每个参数在替换列表中出现的时候都需要放在圆括号中")])]),s._v(" "),a("h3",{attrs:{id:"_3-4-运算符与-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-运算符与-运算符"}},[s._v("#")]),s._v(" 3.4 #运算符与##运算符")]),s._v(" "),a("p",[s._v("我们在使用宏的时候可以使用这两种运算符（它们是"),a("strong",[s._v("宏专用的")]),s._v("）")]),s._v(" "),a("p",[a("strong",[s._v("#运算符")]),s._v("的作用就是将宏的一个参数转化为字符串字面量，仅允许出现在红的替换列表之内，而且对于对象中的 "),a("code",[s._v('"')]),s._v(" 和 "),a("code",[s._v("\\")]),s._v(" 将会自动转化为 "),a("code",[s._v('\\"')]),s._v(" 与 "),a("code",[s._v("\\\\")]),s._v(" 以适应字符串字面量")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("PRINT_INT")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("#n ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" = %d\\n"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n\n调用时\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("PRINT_INT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n相当于：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i/j"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" = %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("中定义的这个宏，就是很巧妙地达到了用途。")]),s._v(" "),a("p",[a("strong",[s._v("##运算符")]),s._v("的作用是将两个记号粘合在一起形成一个记号，如果其中一个操作数是一个宏参数，那么粘合动作将会在形式参数被实际值替换之后发生。")]),s._v(" "),a("p",[s._v("例如我们可以创建一个可以**计算不同数据类型的数值的最大值的宏：**由于C程序不允许创建多个函数名相同的函数，我们可以使用##运算符对在宏内定义的函数名做一些修改从而达到这个目的：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("GET_MAX")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("            ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("type type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("##")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("_max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("type x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("                                ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" ")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("需要注意的是：#运算符与##运算符都有一个缺点，是一件怪异的事：\n如果有宏定义 "),a("code",[s._v("#define CONTACT(x,y) x##y")]),s._v(" ，当我们调用的时候如果是 "),a("code",[s._v("CONTACT(a,CONTACT(b,c))")]),s._v(" 结果不会是你所想的 "),a("code",[s._v("abc")]),s._v(" 而是 "),a("code",[s._v("aCONTACT(x,y)")]),s._v(" 这是一件很奇怪的事，你不是说“如果其中一个操作数是一个宏参数，那么粘合动作将会在形式参数被实际值替换之后发生”吗？")]),s._v(" "),a("p",[s._v("实际上，位于##与#运算符之前和之后的宏参数再替换时不被扩展，在使用他们的时候尽量使用简单的宏作为操作数，但是这也有破解的方法：就是再定义一个宏去调用这个宏 "),a("code",[s._v("#define CONTACT2(x,y) CONTACT(x,y)")]),s._v(" 然后再去进行 "),a("code",[s._v("CONTACT2(a,CONTACT2(b,c))")]),s._v(" 即可，这是由于 "),a("code",[s._v("CONTACT2")]),s._v(" 的替换列表不包含##运算符，所有的##运算都是在调用 "),a("code",[s._v("CONTACT")]),s._v(" 宏而已。")]),s._v(" "),a("h3",{attrs:{id:"_3-5-创建较长的宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-创建较长的宏"}},[s._v("#")]),s._v(" 3.5 创建较长的宏")]),s._v(" "),a("p",[s._v("在创建较长的宏的方面，"),a("strong",[s._v("逗号运算符")]),s._v("是非常有用的，因为虽然输出的值是一个语句的，但是逗号左右的两条指令都执行了，例如：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("ECHO")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("还有另一种方法，就是把"),a("strong",[s._v("需要执行的语句都放在一个 do-while 循环里")]),s._v("，条件设为假保证其只执行一次，相较于逗号运算符，这样做的好处是我们不仅可以用几条命令，还可以添加一些结构：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("ECHO")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("           ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        \t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  ")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("有一点需要注意：\n在宏的结尾如果有分号，再在调用的时候就不要再写分号了，最好宏的结尾不要加分号（如上面那个），可以看一个分号导致出错的例子：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("ECHO")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])])]),s._v("\n               预处理\n调用时：        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("     处理后：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ECHO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("puts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("       \t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("可以看出来。由于第五行的结尾有两个分号。导致编译器认为这个选择结构已经结束了，所以剩下的 else 没有从属从而报错。")]),s._v(" "),a("h3",{attrs:{id:"_3-6-预定义宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-预定义宏"}},[s._v("#")]),s._v(" 3.6 预定义宏")]),s._v(" "),a("p",[s._v("在C里有很多已经帮你定义好的宏，可以直接调用：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("名    字")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("描    述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__LINE__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("被编译的文件中的行号")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__FILE__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("被编译的文件名")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__DATE__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("编译的时间（格式“mm dd yyyy”）")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__TIME__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("编译的日期（格式“hh : mm : ss”）")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__STDC__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("如果编译器符合C标准（C89或C99），则值为1")])])])]),s._v(" "),a("p",[a("strong",[s._v("注意")]),s._v(":前后都是两个下划线！")]),s._v(" "),a("h4",{attrs:{id:"_3-6-1-时间-date-和-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-时间-date-和-time"}},[s._v("#")]),s._v(" 3.6.1 时间："),a("code",[s._v("__DATE__")]),s._v(" 和 "),a("code",[s._v("__TIME__")])]),s._v(" "),a("p",[s._v("这两个宏可以指明编译的时间：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Microsoft Windows(c) 2020 Microsoft software, Inc.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Compiled on %s at %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("__DATE__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("__TIME__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n会输出：\nMicrosoft "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Windows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" Microsoft software"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Inc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\nCompiled on Jun "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2020")]),s._v(" at "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("："),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("可见他们输出的形式都是字符串类型的。")]),s._v(" "),a("h4",{attrs:{id:"_3-6-2-寻找-file-与-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-寻找-file-与-line"}},[s._v("#")]),s._v(" 3.6.2 寻找："),a("code",[s._v("__FILE__")]),s._v(" 与 "),a("code",[s._v("__LINE__")])]),s._v(" "),a("p",[s._v("我们通常可以使用这两个宏去寻找在程序中出错的地方，例如在使用除法的时候加上下面的程序就可以检测每次的分母是否为零：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name function"}},[s._v("CHECK_ZERO")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("divisor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*** Attempt yo divide by zero on line %d "')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"of file %s ***"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("__LINE__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("__FILE__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ")])]),s._v("\n\n调用时：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("CHECK_ZERO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nk "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"_3-6-3-c99-中新增的预定义宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-3-c99-中新增的预定义宏"}},[s._v("#")]),s._v(" 3.6.3 C99 中新增的预定义宏")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[s._v("名    字")]),s._v(" "),a("th",{staticStyle:{"text-align":"center"}},[s._v("描    述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__STDC_HOSTED__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("如果是托管式实现，值为一；如果是独立式实现，值为0")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__STDC_VERSION__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("支持的C标准版本")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__STDC_IEC_559__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("如果支持IEC 60559浮点数运算，则值为1")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__STDC_IEC_559_COMPLEX__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("如果支持IEC 60559复数运算，则值为1")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[s._v("__STDC_ISO_10646__")])]),s._v(" "),a("td",{staticStyle:{"text-align":"center"}},[s._v("如果 "),a("code",[s._v("wchar_t")]),s._v(" 的值与指定年月的ISO 10646便准相匹配，则值为yyyymmL")])])])]),s._v(" "),a("p",[s._v("对于什么是C的托管式实现与独立式实现，书上有如下描述：")]),s._v(" "),a("blockquote",[a("p",[s._v("C 的实现（mplementation）包括编译器和执行C程序所需要的其他软件。C99将实现分为两种：托管式（hosted）和独立式（freestanding）。托管式实现（hosted implementation）能够接受任何符合C99标准的程序，而独立式实现（freestanding implementation）除了几个最基本的以外，不一定要能够编译使用复数类型或标准头的程序。（·特别是，独立式实现不需要支持"),a("code",[s._v("<stdio.h>")]),s._v("头）如果编译器是托管式实现"),a("code",[s._v("__STDC_HOSTED__")]),s._v(" 宏代表常数1，否则值为0。")])]),s._v(" "),a("blockquote",[a("p",[s._v("大多数程序（包括本书中的程序）都需要托管式实现，这些程序需要底层的操作系统来提供输入输出和其他基本服务。C的独立式实现用于不需要操作系统（或只需要很小的操作系统）的程序。例如，编写操作系统内核时需要用到独立式实现（这时不需要传统的输入/输出，因而不需要<stdio.h>）。独立式实现还可用于为嵌入式系统编写软件。")])]),s._v(" "),a("p",[a("code",[s._v("__STDC_VERSION__")]),s._v(" 宏为我们提供了一种查看编译器所识别出的标准版本的方法。这个宏第一次出现在C89标准的Amendment1中，该文档指明宏的值为长整数常量199409L（代表修订的年月）。如果编译器符合C99标准，其值为199901L。对于标准的每一个后续版本（以及每一次后续修订），宏的值都有所变化，用 %d 转义符来调出它就好。")]),s._v(" "),a("p",[s._v("其他的了解就好")]),s._v(" "),a("h2",{attrs:{id:"_4-0-条件编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-0-条件编译"}},[s._v("#")]),s._v(" 4.0 条件编译")]),s._v(" "),a("p",[s._v("条件编译就是通过预处理器的所执行的测试结果来确定是否包含某个代码片段。")]),s._v(" "),a("h3",{attrs:{id:"_4-1-if-和-endif"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-if-和-endif"}},[s._v("#")]),s._v(" 4.1 "),a("code",[s._v("#if")]),s._v(" 和 "),a("code",[s._v("#endif")])]),s._v(" "),a("p",[s._v("在我们找bug的过程中，通常会需要一段测试代码取检测在某个范围内的数值值看其是否正确，但是用完了之后防止以后再需要用一般会注释起来，但是用的时候一段段去注释有点麻烦，我们可以用这种条件编译的方法：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("DEBUG")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")])])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("DEBUG")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在需要调试的时候，把 "),a("code",[s._v("DEBUG")]),s._v(" 的值调为1，不调试的时候设为0即可")]),s._v(" "),a("p",[s._v("准确地讲，"),a("code",[s._v("DEBUG")]),s._v(" 所在的位置是一个常量表达式，和选择结构的判断条件相同。但是请记住：这个"),a("strong",[s._v("位置上只能是一个宏")]),s._v("，因为这个计算进行在预处理阶段，是不接触程序内的参数的！")]),s._v(" "),a("p",[s._v("需要关注的是，"),a("strong",[s._v("未定义的宏如果处在这个位置，相当于 0")])]),s._v(" "),a("h3",{attrs:{id:"_4-2-defined-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-defined-运算符"}},[s._v("#")]),s._v(" 4.2 "),a("code",[s._v("defined")]),s._v(" 运算符")]),s._v(" "),a("p",[s._v("这也是一个预处理器专用的运算符，他的操作数是标识符，如果是一个已经定义过的宏则返回1，否则返回0")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HELLO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_4-3-ifdef-和-ifndef"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-ifdef-和-ifndef"}},[s._v("#")]),s._v(" 4.3 "),a("code",[s._v("#ifdef")]),s._v(" 和 "),a("code",[s._v("#ifndef")])]),s._v(" "),a("p",[s._v("其实 "),a("code",[s._v("#ifdef")]),s._v(" 效果和 "),a("code",[s._v("#if")]),s._v(" 加上 "),a("code",[s._v("defined")]),s._v(" 效果相同，都是检测宏是否被定义过，有则包含此段代码，无则不包含")]),s._v(" "),a("p",[a("code",[s._v("#ifndef")]),s._v(" 是一样的只不过它是未定义时包含，已经定义时不包含")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifdef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("HELLO            #ifndef "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("HELLO            #"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HELLO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("            等价于   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("              等价于   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")]),s._v("                    "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])])])])])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_4-4-elif-与-else"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-elif-与-else"}},[s._v("#")]),s._v(" 4.4 "),a("code",[s._v("#elif")]),s._v(" 与 "),a("code",[s._v("#else")])]),s._v(" "),a("p",[s._v("和级联的 if - else 结构相似，"),a("code",[s._v("#elif")]),s._v(" 就相当于 "),a("code",[s._v("else if()")]),s._v(" ，而 "),a("code",[s._v("#else")]),s._v(" 就相当于 "),a("code",[s._v("else")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("常量表达式")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("常量表达式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("else")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_4-5-条件编译的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-条件编译的优点"}},[s._v("#")]),s._v(" 4.5 条件编译的优点")]),s._v(" "),a("ul",[a("li",[s._v("**可移植性增强，**请看如下代码")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("WIN32")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("WIN32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\nWindows适用程序\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LINUX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\nLinux适用程序\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MACOS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\nMac适用程序\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("在程序内可以"),a("strong",[s._v("检测是否定义了某个宏")]),s._v("，没有可以为它增加定义")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("HELLO")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("HELLO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("hi")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_5-0-其他预处理指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-其他预处理指令"}},[s._v("#")]),s._v(" 5.0 其他预处理指令")]),s._v(" "),a("h3",{attrs:{id:"_5-1-error-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-error-指令"}},[s._v("#")]),s._v(" 5.1 "),a("code",[s._v("#error")]),s._v(" 指令")]),s._v(" "),a("p",[s._v("使用的格式为："),a("strong",[a("code",[s._v("#error 消息")])])]),s._v(" "),a("p",[s._v("我们用到 "),a("code",[s._v("#error")]),s._v(" 命令的时候一定是遇到严重错误的时候，也就是在编译阶段就发现了错误，从而终止编译，并且发送一条错误指令")]),s._v(" "),a("p",[s._v("通常与条件编译指令一起使用，当满足某个条件的时候，触发 "),a("code",[s._v("#error")])]),s._v(" "),a("h3",{attrs:{id:"_5-2-line-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-line-指令"}},[s._v("#")]),s._v(" 5.2 "),a("code",[s._v("#line")]),s._v(" 指令")]),s._v(" "),a("p",[s._v("我们通常编写程序的时候，行号都是“1，2，3，... ...”，而使用 "),a("code",[s._v("#error")]),s._v(" 指令可以改变接下来的行号：")]),s._v(" "),a("p",[s._v("用法1："),a("strong",[a("code",[s._v("#line n")]),s._v(" **\n此时")]),s._v("不包括指令本身这一行**，它的下一行会被命名为第n行，n是介于1和32767（C99为2147483647）之间的整数")]),s._v(" "),a("p",[s._v("用法2："),a("strong",[a("code",[s._v("#line n 文件")])]),s._v("\n此时"),a("strong",[s._v("不包括指令本身这一行")]),s._v("，它的下一行会认为是来源于被指定文件的第n行，但实际上编译的代码仍然是本身的")]),s._v(" "),a("p",[s._v("可以认为 "),a("code",[s._v("#line")]),s._v(" 指令改变了预定义宏 "),a("code",[s._v("__LINE__")]),s._v(" 和 "),a("code",[s._v("__FILE__")]),s._v(" 的值")]),s._v(" "),a("h3",{attrs:{id:"_5-3-pragma-指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-pragma-指令"}},[s._v("#")]),s._v(" 5.3 "),a("code",[s._v("#pragma")]),s._v(" 指令")]),s._v(" "),a("p",[a("code",[s._v("#pragma")]),s._v(" 指令为要求编译器执行某些特殊操作提供了一种方法。这条指令对非常大的程序或需要使用特定编译器的特殊功能的程序非常有用。")]),s._v(" "),a("p",[s._v("格式为："),a("strong",[a("code",[s._v("#pragma 记号")])])]),s._v(" "),a("p",[s._v("其中，记号是任意记号。"),a("code",[s._v("#pragma")]),s._v(" 指令可以很简单（只跟着一个记号），也可以很复杂：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("pragma")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("data（heap_size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("，stack_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("）")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("#pragma")]),s._v(" 指令中出现的命令集在不同的编译器上是不一样的。你必须通过查阅你所使用的编译器的文档来了解可以使用哪些命令，以及这些命令的功能。顺便提一下，如果 "),a("code",[s._v("#pragma")]),s._v(" 指令包含了无法识别的命令，预处理器必须忽略这些 "),a("code",[s._v("#pragma")]),s._v(" 指令，不允许给出出错消息")]),s._v(" "),a("p",[s._v("C89中没有标准的编译提示（pragma），它们都是在实现中定义的。C99有3个标准的编译提示，都使用 "),a("code",[s._v("STDC")]),s._v(" 作为 "),a("code",[s._v("#pragma")]),s._v(" 之后的第一个记号。这些编译提示是 "),a("code",[s._v("FP_CONTRACT")]),s._v("、"),a("code",[s._v("CX_LIMITED_RANGE")]),s._v(" 和 "),a("code",[s._v("FENV_ACCESS")])]),s._v(" "),a("p",[s._v("其实这个我不太懂，请参考"),a("a",{attrs:{href:"http://c.biancheng.net/cpp/html/469.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这个"),a("OutboundLink")],1),s._v("吧")]),s._v(" "),a("h3",{attrs:{id:"_5-4-prama-运算符-c99"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-prama-运算符-c99"}},[s._v("#")]),s._v(" 5.4 "),a("code",[s._v("_Prama")]),s._v(" 运算符（C99）")]),s._v(" "),a("p",[s._v("C99引入了与 "),a("code",[s._v("#prama")]),s._v(" 一起使用的 "),a("code",[s._v("_Prama")]),s._v(" 运算符：")]),s._v(" "),a("p",[s._v("格式："),a("strong",[a("code",[s._v("_Prama (字符串字面量)")])])]),s._v(" "),a("p",[s._v("遇到该表达式时，预处理器通过移除字符串两端的双引号并分别用字符 "),a("code",[s._v('"')]),s._v(" 和 "),a("code",[s._v("\\")]),s._v(" 代替转义序列 "),a("code",[s._v('\\"')]),s._v(" 和 "),a("code",[s._v("\\\\")]),s._v(" 来实现对字符串字面量（C99标准中的术语）的“去字符串化”。表达式的结果是一系列的记号，这些记号被视为出现在pragma指令中。例如：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("_Pragma（"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"data（heap_size => 1000，stack_size => 2000）"')]),s._v("）\n等价于\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("pragma")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("data（heap_size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("，stack_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("）")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("_Pragma")]),s._v(" 运算符使我们摆脱了预处理器的局限性：预处理指令不能产生其他指令。由于 "),a("code",[s._v("_Pragma")]),s._v(" 是运算符而不是指令，所以可以出现在宏定义中。这使得我们能够在 "),a("code",[s._v("#pragma")]),s._v(" 指令后面进行宏的扩展。")])])}),[],!1,null,null,null);t.default=e.exports}}]);